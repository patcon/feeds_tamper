<?php
// $Id$

/**
* Implementation of hook_feeds_after_parse().
*
* This is the meat of the whole deal.  After every Feeds run, before going into
* processing, this gets called and modifies the data based on the configuration.
*/
function feeds_tamper_feeds_after_parse(FeedsImporter $importer, FeedsSource $source) {
  $node = $source->batch->feedNode();
  $nid = $node ? $node->nid : 0;
  $attached = feeds_tamper_get_attached($importer->id, $nid);
  if (empty($attached)) {
    return;
  }
  foreach ($source->batch->items as $item_key => &$item) {
    foreach ($attached as $element_key => $attached_instances) {
      foreach ($attached_instances as $instance_) {
        $instance = feeds_tamper_load_instance($instance_['instance_id']);
        $plugin = feeds_tamper_get_plugin($instance->plugin_id);

        if (is_array($item[$element_key]) && $plugin['multi'] == 'loop') {
          foreach ($item[$element_key] as &$i) {
            $plugin['callback']($source, $item_key, $element_key, $i, $instance->settings);
          }
        }

        else if (is_array($item[$element_key]) && $plugin['multi'] == 'direct') {
          $plugin['callback']($source, $item_key, $element_key, $item[$element_key], $instance->settings);
        }

        else if (!is_array($item[$element_key]) && $plugin['single'] != 'skip') {
          $plugin['callback']($source, $item_key, $element_key, $item[$element_key], $instance->settings);
        }
      }
    }
  }
}

/**
 * Drupal hooks.
 */

/**
 * Implementation of hook_nodeapi().
 */
function feeds_tamper_nodeapi(&$node, $op, $form) {
  if ($importer_id = feeds_get_importer_id($node->type)) {
    switch ($op) {
      case 'validate':
      case 'presave':
        break;
      case 'insert':
      case 'update':
        _feeds_tamer_save($importer_id, $node->nid, $node->feeds_tamper);
        break;
      case 'delete':
        feeds_tamper_delete_attached($importer_id, $node->nid);
        break;
    }
  }
}

function _feeds_tamer_save($importer_id, $nid, $values) {
  feeds_tamper_delete_attached($importer_id, $nid);
  foreach ($values as $source_field => $items) {
    $items = array_filter($items['list']);
    $settings = array();
    foreach ($items as $item) {
      $settings[$source_field][] = array(
        'instance_id' => $item,
        //'weight' => $item['weight'],
      );
    }
    feeds_tamper_save_attached($importer_id, $nid, $settings);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function feeds_tamper_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'node-form') {
    if ($importer_id = feeds_get_importer_id($form['type']['#value'])) {
      $nid = !empty($form['nid']['#value']) ? $form['nid']['#value'] : 0;
      _feeds_tamper_form_alter($importer_id, $nid, $form);
    }
  }
}

function _feeds_tamper_form_alter($importer_id, $nid, &$form) {
  $instances = feeds_tamper_load_all_instances();
  $source = feeds_source($importer_id, $nid);
  $mappings = $source->importer->processor->config['mappings'];
  $attached = feeds_tamper_get_attached($importer_id, $nid);

  $form['feeds_tamper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Feeds Tamper'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $mods = array_keys($instances);
  $mods = array_combine($mods, $mods);

  foreach ($mappings as $mapping) {
    $def = isset($attached[$mapping['source']]) ? $attached[$mapping['source']] : array();
    $def_value = array();

    foreach ($def as $d) {
      $def_value[$d['instance_id']] = $d['instance_id'];
    }

    $form['feeds_tamper'][$mapping['source']] = array(
      '#type' => 'fieldset',
      '#title' => t($mapping['source']),
    );

    $form['feeds_tamper'][$mapping['source']]['list'] = array(
      '#type' => 'checkboxes',
      '#options' => $mods,
      '#default_value' => $def_value,
    );
  }
}

/**
 * Implementation of hook_feeds_node_processor_targets_alter().
 *
 * @see FeedsNodeProcessor::getMappingTargets().
 */
function feeds_tamper_feeds_node_processor_targets_alter(&$targets, $content_type) {
  $targets['feeds_tamper_store'] = array(
    'name' => 'Store',
    'description' => t('A field that stores the source data temporarily.'),
  );
}

/**
 * Implementation of hook_feeds_parser_sources_alter().
 */
function feeds_tamper_feeds_parser_sources_alter(&$sources, $content_type) {
  $sources['tamper:0'] = array(
    'name' => 'Tamper Source',
    'description' => t('A field that can be rewritten usings tokens.'),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * This is an interesting bit of work. Each source name has to be unique,
 * but we have no idea how many to create with getMappingSources() because we
 * don't know how many targets there are going to be.
 *
 * The solution is to keep track in the form how many have been added.
 */
function feeds_tamper_form_feeds_ui_mapping_form_alter($form, &$form_state) {
  $newest_token = array();
  foreach ($form['#mappings'] as $mapping) {
    if (strpos($mapping['source'], 'tamper:') === 0) {
      $newest_token = $mapping;
    }
  }
  if (!empty($newest_token)) {
    list($a, $count) = explode(':', $newest_token['source']);
    $default_source = $a . ':' . '0';
    $label = $form['source']['#options'][$default_source];
    unset($form['source']['#options'][$default_source]);
    $form['source']['#options'][$a . ':' . ++$count] = $label;
  }
  return $form;
}
/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function feeds_tamper_form_feeds_import_form_alter(&$form, &$form_state) {
  _feeds_tamper_form_alter($form['#importer_id'], 0, $form);
  $form['#submit'][] = 'feeds_tamper_form_feeds_import_submit';
}

function feeds_tamper_form_feeds_import_submit($form, $form_state) {
  _feeds_tamer_save($form['#importer_id'], 0, $form_state['values']['feeds_tamper']);
}
/**
 * Feeds Tamper api functions.
 */

/**
 * Load all modifiers.
 */
function feeds_tamper_load_all_instances($load_disabled = FALSE) {
  $instances = array();
  if (function_exists('ctools_include')) {
    ctools_include('export');
    $configs = ctools_export_load_object('feeds_tamper_instance', 'all');
    foreach ($configs as $instance_id => $config) {
      if (!empty($config->id) && ($load_disabled || empty($config->disabled))) {
        $instances[$instance_id] = $config;
      }
    }
  }
  return $instances;
}

/**
 * Load a plugin instance by id.
 */
function feeds_tamper_load_instance($id) {
  $t = ctools_export_load_object('feeds_tamper_instance', 'names', array($id));
  return $t[$id];
}

/**
 * Get the modifiers attached to a feed source.
 */
function feeds_tamper_get_attached($importer_id, $nid, $source_field = NULL) {
  $results = array();

  if ($source_field) {
    $q_string = "SELECT instance_id,weight FROM {feeds_tamper_attached}
                 WHERE importer_id = '%s' AND nid = %d AND source_field = '%s'
                 ORDER BY weight ASC";
    $query = db_query($q_string, $importer_id, $nid, $source_field);

    while ($result = db_fetch_array($query)) {
      $results[$source_field][] = $result;
    }
  }

  else {
    $q_string = "SELECT source_field,instance_id,weight FROM {feeds_tamper_attached}
                 WHERE importer_id = '%s' AND nid = %d ORDER BY weight ASC";
    $query = db_query($q_string, $importer_id, $nid);

    while ($result = db_fetch_array($query)) {
      $results[$result['source_field']][] = array(
        'instance_id' => $result['instance_id'],
        'weight'      => $result['weight'],
      );
    }
  }

  return $results;
}

/**
 * Inserts a record.
 */
function feeds_tamper_save_attached($importer_id, $nid, $settings) {
  $obj = new stdClass();
  $obj->importer_id = $importer_id;
  $obj->nid = $nid;

  foreach ($settings as $source_field => $config) {
    $obj->source_field = $source_field;
    foreach ($config as $instance) {
      $obj->weight = $instance['weight'];
      $obj->instance_id = $instance['instance_id'];
      drupal_write_record('feeds_tamper_attached', $obj);
    }
  }
}

/**
 * Deletes a record.
 */
function feeds_tamper_delete_attached($importer_id, $nid, $source_field = NULL) {
  if ($source_field) {
    return db_query("DELETE FROM {feeds_tamper_attached} WHERE importer_id = '%s' AND nid = %d AND source_field = '%s'", $importer_id, $nid, $source_field);
  }
  return db_query("DELETE FROM {feeds_tamper_attached} WHERE importer_id = '%s' AND nid = %d", $importer_id, $nid);
}

/**
 * Gets all available plugins.
 *
 * @return
 *   An array where the keys are the plugin keys and the values
 *   are the plugin info arrays as defined in hook_feeds_tamper_plugins().
 */
function feeds_tamper_get_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('feeds_tamper', 'plugins');
}

/**
 * Gets a single plugin.
 *
 * @return
 *   An array where the keys are the plugin keys and the values
 *   are the plugin info arrays as defined in hook_feeds_tamper_plugins().
 */
function feeds_tamper_get_plugin($id) {
  ctools_include('plugins');
  return ctools_get_plugins('feeds_tamper', 'plugins', $id);
}

/**
 * CTools stuff.
 */

/**
 * Implementation of hook_ctools_plugin_api().
 */
function feeds_tamper_ctools_plugin_api($owner, $api) {
  if ($owner == 'feeds_tamper' && $api == 'feeds_tamper_preset') {
    return array('version' => 1);
  }
}

/**
* Implementation of hook_ctools_plugin_directory().
*/
function feeds_tamper_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
  if ($module == 'feeds_tamper') {
    return 'plugins/';
  }
}

/**
 * Implementation of hook_ctools_plugin_plugins().
 *
 * Psuedo hook defintion plugin system options and defaults.
 */
function feeds_tamper_ctools_plugin_plugins() {
  return array(
    'cache' => FALSE,
    'use hook' => FALSE,
  );
}
